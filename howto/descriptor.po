# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Stefan Ocetkiewicz <stefan.ocetkiewicz@gmail.com>, 2020
# Seweryn Piórkowski <seweryn.piorkowski@gmail.com>, 2020
# m_aciek <maciej.olko@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-24 04:26+0000\n"
"PO-Revision-Date: 2017-02-16 17:44+0000\n"
"Last-Translator: m_aciek <maciej.olko@gmail.com>, 2020\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && (n"
"%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && n"
"%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Descriptor HowTo Guide"
msgstr ""

msgid "Author"
msgstr "Autor"

msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

msgid "Contact"
msgstr ""

msgid "<python at rcn dot com>"
msgstr ""

msgid "Contents"
msgstr "Zawartość"

msgid ""
":term:`Descriptors <descriptor>` let objects customize attribute lookup, "
"storage, and deletion."
msgstr ""

msgid "This HowTo guide has three major sections:"
msgstr ""

msgid ""
"The \"primer\" gives a basic overview, moving gently from simple examples, "
"adding one feature at a time.  It is a great place to start."
msgstr ""

msgid ""
"The second section shows a complete, practical descriptor example.  If you "
"already know the basics, start there."
msgstr ""

msgid ""
"The third section provides a more technical tutorial that goes into the "
"detailed mechanics of how descriptors work.  Most people don't need this "
"level of detail."
msgstr ""

msgid "Primer"
msgstr ""

msgid ""
"In this primer, we start with most basic possible example and then we'll add "
"new capabilities one by one."
msgstr ""

msgid "Simple example: A descriptor that returns a constant"
msgstr ""

msgid ""
"The :class:`Ten` class is a descriptor that always returns the constant "
"``10``::"
msgstr ""

msgid ""
"To use the descriptor, it must be stored as a class variable in another "
"class::"
msgstr ""

msgid ""
"An interactive session shows the difference between normal attribute lookup "
"and descriptor lookup::"
msgstr ""

msgid ""
"In the ``a.x`` attribute lookup, the dot operator finds the value ``5`` "
"stored in the class dictionary.  In the ``a.y`` descriptor lookup, the dot "
"operator calls the descriptor's :meth:`__get__()` method.  That method "
"returns ``10``. Note that the value ``10`` is not stored in either the class "
"dictionary or the instance dictionary.  Instead, the value ``10`` is "
"computed on demand."
msgstr ""

msgid ""
"This example shows how a simple descriptor works, but it isn't very useful. "
"For retrieving constants, normal attribute lookup would be better."
msgstr ""

msgid ""
"In the next section, we'll create something more useful, a dynamic lookup."
msgstr ""

msgid "Dynamic lookups"
msgstr ""

msgid ""
"Interesting descriptors typically run computations instead of doing lookups::"
msgstr ""

msgid ""
"An interactive session shows that the lookup is dynamic — it computes "
"different, updated answers each time::"
msgstr ""

msgid ""
"Besides showing how descriptors can run computations, this example also "
"reveals the purpose of the parameters to :meth:`__get__`.  The *self* "
"parameter is *size*, an instance of *DirectorySize*.  The *obj* parameter is "
"either *g* or *s*, an instance of *Directory*.  It is *obj* parameter that "
"lets the :meth:`__get__` method learn the target directory.  The *objtype* "
"parameter is the class *Directory*."
msgstr ""

msgid "Managed attributes"
msgstr ""

msgid ""
"A popular use for descriptors is managing access to instance data.  The "
"descriptor is assigned to a public attribute in the class dictionary while "
"the actual data is stored as a private attribute in the instance "
"dictionary.  The descriptor's :meth:`__get__` and :meth:`__set__` methods "
"are triggered when the public attribute is accessed."
msgstr ""

msgid ""
"In the following example, *age* is the public attribute and *_age* is the "
"private attribute.  When the public attribute is accessed, the descriptor "
"logs the lookup or update::"
msgstr ""

msgid ""
"An interactive session shows that all access to the managed attribute *age* "
"is logged, but that the regular attribute *name* is not logged::"
msgstr ""

msgid ""
"One major issue with this example is the private name *_age* is hardwired in "
"the *LoggedAgeAccess* class.  That means that each instance can only have "
"one logged attribute and that its name is unchangeable.  In the next "
"example, we'll fix that problem."
msgstr ""

msgid "Customized Names"
msgstr ""

msgid ""
"When a class uses descriptors, it can inform each descriptor about what "
"variable name was used."
msgstr ""

msgid ""
"In this example, the :class:`Person` class has two descriptor instances, "
"*name* and *age*.  When the :class:`Person` class is defined, it makes a "
"callback to :meth:`__set_name__` in *LoggedAccess* so that the field names "
"can be recorded, giving each descriptor its own *public_name* and "
"*private_name*::"
msgstr ""

msgid ""
"An interactive session shows that the :class:`Person` class has called :meth:"
"`__set_name__` so that the field names would be recorded.  Here we call :"
"func:`vars` to lookup the descriptor without triggering it::"
msgstr ""

msgid "The new class now logs access to both *name* and *age*::"
msgstr ""

msgid "The two *Person* instances contain only the private names::"
msgstr ""

msgid "Closing thoughts"
msgstr ""

msgid ""
"A :term:`descriptor` is what we call any object that defines :meth:"
"`__get__`, :meth:`__set__`, or :meth:`__delete__`."
msgstr ""

msgid ""
"Descriptors get invoked by the dot operator during attribute lookup.  If a "
"descriptor is accessed indirectly with ``vars(some_class)"
"[descriptor_name]``, the descriptor instance is returned without invoking it."
msgstr ""

msgid ""
"Descriptors only work when used as class variables.  When put in instances, "
"they have no effect."
msgstr ""

msgid ""
"The main motivation for descriptors is to provide a hook allowing objects "
"stored in class variables to control what happens during dotted lookup."
msgstr ""

msgid ""
"Traditionally, the calling class controls what happens during lookup. "
"Descriptors invert that relationship and allow the data being looked-up to "
"have a say in the matter."
msgstr ""

msgid ""
"Descriptors are used throughout the language.  It is how functions turn into "
"bound methods.  Common tools like :func:`classmethod`, :func:"
"`staticmethod`, :func:`property`, and :func:`functools.cached_property` are "
"all implemented as descriptors."
msgstr ""

msgid "Complete Practical Example"
msgstr ""

msgid ""
"In this example, we create a practical and powerful tool for locating "
"notoriously hard to find data corruption bugs."
msgstr ""

msgid "Validator class"
msgstr ""

msgid ""
"A validator is a descriptor for managed attribute access.  Prior to storing "
"any data, it verifies that the new value meets various type and range "
"restrictions.  If those restrictions aren't met, it raises an exception to "
"prevents data corruption at its source."
msgstr ""

msgid ""
"This :class:`Validator` class is both an :term:`abstract base class` and a "
"managed attribute descriptor::"
msgstr ""

msgid ""
"Custom validators need to subclass from :class:`Validator` and supply a :"
"meth:`validate` method to test various restrictions as needed."
msgstr ""

msgid "Custom validators"
msgstr ""

msgid "Here are three practical data validation utilities:"
msgstr ""

msgid ""
":class:`OneOf` verifies that a value is one of a restricted set of options."
msgstr ""

msgid ""
":class:`Number` verifies that a value is either an :class:`int` or :class:"
"`float`.  Optionally, it verifies that a value is between a given minimum or "
"maximum."
msgstr ""

msgid ""
":class:`String` verifies that a value is a :class:`str`.  Optionally, it "
"validates a given minimum or maximum length.  Optionally, it can test for "
"another predicate as well."
msgstr ""

msgid "Practical use"
msgstr ""

msgid "Here's how the data validators can be used in a real class::"
msgstr ""

msgid "The descriptors prevent invalid instances from being created::"
msgstr ""

msgid "Technical Tutorial"
msgstr ""

msgid ""
"What follows is a more technical tutorial for the mechanics and details of "
"how descriptors work."
msgstr ""

msgid "Abstract"
msgstr "Streszczenie"

msgid ""
"Defines descriptors, summarizes the protocol, and shows how descriptors are "
"called.  Examines a custom descriptor and several built-in Python "
"descriptors including functions, properties, static methods, and class "
"methods.  Shows how each works by giving a pure Python equivalent and a "
"sample application."
msgstr ""

msgid ""
"Learning about descriptors not only provides access to a larger toolset, it "
"creates a deeper understanding of how Python works and an appreciation for "
"the elegance of its design."
msgstr ""

msgid "Definition and Introduction"
msgstr ""

msgid ""
"In general, a descriptor is an object attribute with \"binding behavior\", "
"one whose attribute access has been overridden by methods in the descriptor "
"protocol.  Those methods are :meth:`__get__`, :meth:`__set__`, and :meth:"
"`__delete__`.  If any of those methods are defined for an object, it is said "
"to be a descriptor."
msgstr ""

msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary.  For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and "
"continuing through the base classes of ``type(a)`` excluding metaclasses. If "
"the looked-up value is an object defining one of the descriptor methods, "
"then Python may override the default behavior and invoke the descriptor "
"method instead. Where this occurs in the precedence chain depends on which "
"descriptor methods were defined."
msgstr ""

msgid ""
"Descriptors are a powerful, general purpose protocol.  They are the "
"mechanism behind properties, methods, static methods, class methods, and :"
"func:`super()`.  They are used throughout Python itself.  Descriptors "
"simplify the underlying C code and offer a flexible set of new tools for "
"everyday Python programs."
msgstr ""

msgid "Descriptor Protocol"
msgstr ""

msgid "``descr.__get__(self, obj, type=None) -> value``"
msgstr ""

msgid "``descr.__set__(self, obj, value) -> None``"
msgstr ""

msgid "``descr.__delete__(self, obj) -> None``"
msgstr ""

msgid ""
"That is all there is to it.  Define any of these methods and an object is "
"considered a descriptor and can override default behavior upon being looked "
"up as an attribute."
msgstr ""

msgid ""
"If an object defines :meth:`__set__` or :meth:`__delete__`, it is considered "
"a data descriptor.  Descriptors that only define :meth:`__get__` are called "
"non-data descriptors (they are typically used for methods but other uses are "
"possible)."
msgstr ""

msgid ""
"Data and non-data descriptors differ in how overrides are calculated with "
"respect to entries in an instance's dictionary.  If an instance's dictionary "
"has an entry with the same name as a data descriptor, the data descriptor "
"takes precedence.  If an instance's dictionary has an entry with the same "
"name as a non-data descriptor, the dictionary entry takes precedence."
msgstr ""

msgid ""
"To make a read-only data descriptor, define both :meth:`__get__` and :meth:"
"`__set__` with the :meth:`__set__` raising an :exc:`AttributeError` when "
"called.  Defining the :meth:`__set__` method with an exception raising "
"placeholder is enough to make it a data descriptor."
msgstr ""

msgid "Invoking Descriptors"
msgstr ""

msgid ""
"A descriptor can be called directly by its method name.  For example, ``d."
"__get__(obj)``."
msgstr ""

msgid ""
"Alternatively, it is more common for a descriptor to be invoked "
"automatically upon attribute access.  For example, ``obj.d`` looks up ``d`` "
"in the dictionary of ``obj``.  If ``d`` defines the method :meth:`__get__`, "
"then ``d.__get__(obj)`` is invoked according to the precedence rules listed "
"below."
msgstr ""

msgid ""
"The details of invocation depend on whether ``obj`` is an object or a class."
msgstr ""

msgid ""
"For objects, the machinery is in :meth:`object.__getattribute__` which "
"transforms ``b.x`` into ``type(b).__dict__['x'].__get__(b, type(b))``.  The "
"implementation works through a precedence chain that gives data descriptors "
"priority over instance variables, instance variables priority over non-data "
"descriptors, and assigns lowest priority to :meth:`__getattr__` if provided. "
"The full C implementation can be found in :c:func:"
"`PyObject_GenericGetAttr()` in :source:`Objects/object.c`."
msgstr ""

msgid ""
"For classes, the machinery is in :meth:`type.__getattribute__` which "
"transforms ``B.x`` into ``B.__dict__['x'].__get__(None, B)``.  In pure "
"Python, it looks like::"
msgstr ""

msgid "The important points to remember are:"
msgstr ""

msgid "descriptors are invoked by the :meth:`__getattribute__` method"
msgstr ""

msgid "overriding :meth:`__getattribute__` prevents automatic descriptor calls"
msgstr ""

msgid ""
":meth:`object.__getattribute__` and :meth:`type.__getattribute__` make "
"different calls to :meth:`__get__`."
msgstr ""

msgid "data descriptors always override instance dictionaries."
msgstr ""

msgid "non-data descriptors may be overridden by instance dictionaries."
msgstr ""

msgid ""
"The object returned by ``super()`` also has a custom :meth:"
"`__getattribute__` method for invoking descriptors.  The attribute lookup "
"``super(B, obj).m`` searches ``obj.__class__.__mro__`` for the base class "
"``A`` immediately following ``B`` and then returns ``A.__dict__['m']."
"__get__(obj, B)``.  If not a descriptor, ``m`` is returned unchanged.  If "
"not in the dictionary, ``m`` reverts to a search using :meth:`object."
"__getattribute__`."
msgstr ""

msgid ""
"The implementation details are in :c:func:`super_getattro()` in :source:"
"`Objects/typeobject.c`.  and a pure Python equivalent can be found in "
"`Guido's Tutorial`_."
msgstr ""

msgid ""
"The details above show that the mechanism for descriptors is embedded in "
"the :meth:`__getattribute__()` methods for :class:`object`, :class:`type`, "
"and :func:`super`.  Classes inherit this machinery when they derive from :"
"class:`object` or if they have a metaclass providing similar functionality. "
"Likewise, classes can turn-off descriptor invocation by overriding :meth:"
"`__getattribute__()`."
msgstr ""

msgid "Automatic Name Notification"
msgstr ""

msgid ""
"Sometimes it is desirable for a descriptor to know what class variable name "
"it was assigned to.  When a new class is created, the :class:`type` "
"metaclass scans the dictionary of the new class.  If any of the entries are "
"descriptors and if they define :meth:`__set_name__`, that method is called "
"with two arguments.  The *owner* is the class where the descriptor is used, "
"the *name* is class variable the descriptor was assigned to."
msgstr ""

msgid ""
"The implementation details are in :c:func:`type_new()` and :c:func:"
"`set_names()` in :source:`Objects/typeobject.c`."
msgstr ""

msgid ""
"Since the update logic is in :meth:`type.__new__`, notifications only take "
"place at the time of class creation.  If descriptors are added to the class "
"afterwards, :meth:`__set_name__` will need to be called manually."
msgstr ""

msgid "Descriptor Example"
msgstr ""

msgid ""
"The following code creates a class whose objects are data descriptors which "
"print a message for each get or set.  Overriding :meth:`__getattribute__` is "
"alternate approach that could do this for every attribute.  However, this "
"descriptor is useful for monitoring just a few chosen attributes::"
msgstr ""

msgid ""
"The protocol is simple and offers exciting possibilities.  Several use cases "
"are so common that they have been packaged into individual function calls. "
"Properties, bound methods, static methods, and class methods are all based "
"on the descriptor protocol."
msgstr ""

msgid "Properties"
msgstr ""

msgid ""
"Calling :func:`property` is a succinct way of building a data descriptor "
"that triggers function calls upon access to an attribute.  Its signature is::"
msgstr ""

msgid ""
"The documentation shows a typical use to define a managed attribute ``x``::"
msgstr ""

msgid ""
"To see how :func:`property` is implemented in terms of the descriptor "
"protocol, here is a pure Python equivalent::"
msgstr ""

msgid ""
"The :func:`property` builtin helps whenever a user interface has granted "
"attribute access and then subsequent changes require the intervention of a "
"method."
msgstr ""

msgid ""
"For instance, a spreadsheet class may grant access to a cell value through "
"``Cell('b10').value``. Subsequent improvements to the program require the "
"cell to be recalculated on every access; however, the programmer does not "
"want to affect existing client code accessing the attribute directly.  The "
"solution is to wrap access to the value attribute in a property data "
"descriptor::"
msgstr ""

msgid "Functions and Methods"
msgstr ""

msgid ""
"Python's object oriented features are built upon a function based "
"environment. Using non-data descriptors, the two are merged seamlessly."
msgstr ""

msgid ""
"Class dictionaries store methods as functions.  In a class definition, "
"methods are written using :keyword:`def` or :keyword:`lambda`, the usual "
"tools for creating functions.  Methods only differ from regular functions in "
"that the first argument is reserved for the object instance.  By Python "
"convention, the instance reference is called *self* but may be called *this* "
"or any other variable name."
msgstr ""

msgid ""
"To support method calls, functions include the :meth:`__get__` method for "
"binding methods during attribute access.  This means that all functions are "
"non-data descriptors which return bound methods when they are invoked from "
"an object.  In pure Python, it works like this::"
msgstr ""

msgid ""
"Running the following in class in the interpreter shows how the function "
"descriptor works in practice::"
msgstr ""

msgid ""
"Access through the class dictionary does not invoke :meth:`__get__`.  "
"Instead, it just returns the underlying function object::"
msgstr ""

msgid ""
"Dotted access from a class calls :meth:`__get__` which just returns the "
"underlying function unchanged::"
msgstr ""

msgid ""
"The function has a :term:`qualified name` attribute to support "
"introspection::"
msgstr ""

msgid ""
"Dotted access from an instance calls :meth:`__get__` which returns a bound "
"method object::"
msgstr ""

msgid ""
"Internally, the bound method stores the underlying function and the bound "
"instance::"
msgstr ""

msgid "Static Methods and Class Methods"
msgstr ""

msgid ""
"Non-data descriptors provide a simple mechanism for variations on the usual "
"patterns of binding functions into methods."
msgstr ""

msgid ""
"To recap, functions have a :meth:`__get__` method so that they can be "
"converted to a method when accessed as attributes.  The non-data descriptor "
"transforms an ``obj.f(*args)`` call into ``f(obj, *args)``.  Calling ``cls."
"f(*args)`` becomes ``f(*args)``."
msgstr ""

msgid "This chart summarizes the binding and its two most useful variants:"
msgstr ""

msgid "Transformation"
msgstr ""

msgid "Called from an object"
msgstr ""

msgid "Called from a class"
msgstr ""

msgid "function"
msgstr ""

msgid "f(obj, \\*args)"
msgstr ""

msgid "f(\\*args)"
msgstr ""

msgid "staticmethod"
msgstr ""

msgid "classmethod"
msgstr ""

msgid "f(type(obj), \\*args)"
msgstr ""

msgid "f(cls, \\*args)"
msgstr ""

msgid ""
"Static methods return the underlying function without changes.  Calling "
"either ``c.f`` or ``C.f`` is the equivalent of a direct lookup into ``object."
"__getattribute__(c, \"f\")`` or ``object.__getattribute__(C, \"f\")``. As a "
"result, the function becomes identically accessible from either an object or "
"a class."
msgstr ""

msgid ""
"Good candidates for static methods are methods that do not reference the "
"``self`` variable."
msgstr ""

msgid ""
"For instance, a statistics package may include a container class for "
"experimental data.  The class provides normal methods for computing the "
"average, mean, median, and other descriptive statistics that depend on the "
"data. However, there may be useful functions which are conceptually related "
"but do not depend on the data.  For instance, ``erf(x)`` is handy conversion "
"routine that comes up in statistical work but does not directly depend on a "
"particular dataset. It can be called either from an object or the class:  "
"``s.erf(1.5) --> .9332`` or ``Sample.erf(1.5) --> .9332``."
msgstr ""

msgid ""
"Since staticmethods return the underlying function with no changes, the "
"example calls are unexciting::"
msgstr ""

msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`staticmethod` would look like this::"
msgstr ""

msgid ""
"Unlike static methods, class methods prepend the class reference to the "
"argument list before calling the function.  This format is the same for "
"whether the caller is an object or a class::"
msgstr ""

msgid ""
"This behavior is useful whenever the function only needs to have a class "
"reference and does not care about any underlying data.  One use for "
"classmethods is to create alternate class constructors.  The classmethod :"
"func:`dict.fromkeys` creates a new dictionary from a list of keys.  The pure "
"Python equivalent is::"
msgstr ""

msgid "Now a new dictionary of unique keys can be constructed like this::"
msgstr ""

msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`classmethod` would look like this::"
msgstr ""

msgid ""
"The code path for ``hasattr(obj, '__get__')`` was added in Python 3.9 and "
"makes it possible for :func:`classmethod` to support chained decorators. For "
"example, a classmethod and property could be chained together::"
msgstr ""
